{
  "hash": "e0eade2a45e127e284010793c0cc4d0e",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Análisis exploratorio de los datos\"\n---\n\n\n# Importar librerías\n\n::: {#ac8a6564 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.impute import KNNImputer\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.graphics.tsaplots import plot_acf\nfrom statsmodels.tsa.stattools import acf, adfuller\nfrom statsmodels.stats.diagnostic import acorr_ljungbox\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n```\n:::\n\n\n# Importar datos\n\n::: {#977d69f1 .cell execution_count=2}\n``` {.python .cell-code}\nbtc = pd.read_csv('https://raw.githubusercontent.com/lihkir/Data/refs/heads/main/Bitcoin%20Historical%20Data.csv')\n\nbtc.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>03/24/2024</td>\n      <td>67,211.9</td>\n      <td>64,036.5</td>\n      <td>67,587.8</td>\n      <td>63,812.9</td>\n      <td>65.59K</td>\n      <td>4.96%</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>03/23/2024</td>\n      <td>64,037.8</td>\n      <td>63,785.6</td>\n      <td>65,972.4</td>\n      <td>63,074.9</td>\n      <td>35.11K</td>\n      <td>0.40%</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>03/22/2024</td>\n      <td>63,785.5</td>\n      <td>65,501.5</td>\n      <td>66,633.3</td>\n      <td>62,328.3</td>\n      <td>72.43K</td>\n      <td>-2.62%</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>03/21/2024</td>\n      <td>65,503.8</td>\n      <td>67,860.0</td>\n      <td>68,161.7</td>\n      <td>64,616.1</td>\n      <td>75.26K</td>\n      <td>-3.46%</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>03/20/2024</td>\n      <td>67,854.0</td>\n      <td>62,046.8</td>\n      <td>68,029.5</td>\n      <td>60,850.9</td>\n      <td>133.53K</td>\n      <td>9.35%</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#57f69be9 .cell execution_count=3}\n``` {.python .cell-code}\nbtc.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n(4999, 7)\n```\n:::\n:::\n\n\n::: {#7cafbc65 .cell execution_count=4}\n``` {.python .cell-code}\nbtc.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4999 entries, 0 to 4998\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype \n---  ------    --------------  ----- \n 0   Date      4999 non-null   object\n 1   Price     4999 non-null   object\n 2   Open      4999 non-null   object\n 3   High      4999 non-null   object\n 4   Low       4999 non-null   object\n 5   Vol.      4993 non-null   object\n 6   Change %  4999 non-null   object\ndtypes: object(7)\nmemory usage: 273.5+ KB\n```\n:::\n:::\n\n\n::: {#80d39dd6 .cell execution_count=5}\n``` {.python .cell-code}\nbtc[['Price', 'Open', 'High', 'Low']] = btc[['Price', 'Open', 'High', 'Low']].replace(',', '', regex=True).astype(float)\nbtc['Change %'] = btc['Change %'].str.replace('%', '').astype(float)\n\nbtc['Date'] = pd.to_datetime(btc['Date'], format='%m/%d/%Y')\n\ndef convert_volume(vol):\n    if isinstance(vol, str):\n        if 'K' in vol:\n            return float(vol.replace('K', '').replace(',', '')) * 1_000\n        elif 'M' in vol:\n            return float(vol.replace('M', '').replace(',', '')) * 1_000_000\n        elif 'B' in vol:\n            return float(vol.replace('B', '').replace(',', '')) * 1_000_000_000\n        else:\n            return float(vol.replace(',', ''))\n    else:\n        return vol\n\nbtc['Vol.'] = btc['Vol.'].apply(convert_volume)\n\nbtc.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-03-24</td>\n      <td>67211.9</td>\n      <td>64036.5</td>\n      <td>67587.8</td>\n      <td>63812.9</td>\n      <td>65590.0</td>\n      <td>4.96</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-03-23</td>\n      <td>64037.8</td>\n      <td>63785.6</td>\n      <td>65972.4</td>\n      <td>63074.9</td>\n      <td>35110.0</td>\n      <td>0.40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-03-22</td>\n      <td>63785.5</td>\n      <td>65501.5</td>\n      <td>66633.3</td>\n      <td>62328.3</td>\n      <td>72430.0</td>\n      <td>-2.62</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2024-03-21</td>\n      <td>65503.8</td>\n      <td>67860.0</td>\n      <td>68161.7</td>\n      <td>64616.1</td>\n      <td>75260.0</td>\n      <td>-3.46</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2024-03-20</td>\n      <td>67854.0</td>\n      <td>62046.8</td>\n      <td>68029.5</td>\n      <td>60850.9</td>\n      <td>133530.0</td>\n      <td>9.35</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#74380410 .cell execution_count=6}\n``` {.python .cell-code}\nbtc.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4999 entries, 0 to 4998\nData columns (total 7 columns):\n #   Column    Non-Null Count  Dtype         \n---  ------    --------------  -----         \n 0   Date      4999 non-null   datetime64[ns]\n 1   Price     4999 non-null   float64       \n 2   Open      4999 non-null   float64       \n 3   High      4999 non-null   float64       \n 4   Low       4999 non-null   float64       \n 5   Vol.      4993 non-null   float64       \n 6   Change %  4999 non-null   float64       \ndtypes: datetime64[ns](1), float64(6)\nmemory usage: 273.5 KB\n```\n:::\n:::\n\n\n::: {#2c22d578 .cell execution_count=7}\n``` {.python .cell-code}\nbtc.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4999</td>\n      <td>4999.000000</td>\n      <td>4999.000000</td>\n      <td>4999.000000</td>\n      <td>4999.000000</td>\n      <td>4.993000e+03</td>\n      <td>4999.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2017-05-21 00:00:00</td>\n      <td>10812.283337</td>\n      <td>10798.901840</td>\n      <td>11067.453051</td>\n      <td>10511.891198</td>\n      <td>1.237685e+07</td>\n      <td>0.415751</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2010-07-18 00:00:00</td>\n      <td>0.100000</td>\n      <td>0.000000</td>\n      <td>0.100000</td>\n      <td>0.000000</td>\n      <td>8.000000e+01</td>\n      <td>-57.210000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2013-12-18 12:00:00</td>\n      <td>226.700000</td>\n      <td>226.450000</td>\n      <td>231.400000</td>\n      <td>221.950000</td>\n      <td>3.185000e+04</td>\n      <td>-1.170000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2017-05-21 00:00:00</td>\n      <td>1975.100000</td>\n      <td>1962.000000</td>\n      <td>2048.400000</td>\n      <td>1875.300000</td>\n      <td>6.877000e+04</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2020-10-21 12:00:00</td>\n      <td>15450.150000</td>\n      <td>15372.150000</td>\n      <td>15954.550000</td>\n      <td>14557.200000</td>\n      <td>1.855900e+05</td>\n      <td>1.785000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2024-03-24 00:00:00</td>\n      <td>73066.300000</td>\n      <td>73066.700000</td>\n      <td>73740.900000</td>\n      <td>71338.400000</td>\n      <td>4.470000e+09</td>\n      <td>336.840000</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>NaN</td>\n      <td>15892.032468</td>\n      <td>15872.785452</td>\n      <td>16270.707594</td>\n      <td>15444.928771</td>\n      <td>1.549821e+08</td>\n      <td>7.094771</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# Datos faltantes\n\n::: {#5fef9093 .cell execution_count=8}\n``` {.python .cell-code}\nmissing_values = btc.isnull().sum()\nmissing_percentage = round((missing_values / len(btc)) * 100, 4)\nmissing_percentage\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nDate        0.00\nPrice       0.00\nOpen        0.00\nHigh        0.00\nLow         0.00\nVol.        0.12\nChange %    0.00\ndtype: float64\n```\n:::\n:::\n\n\n::: {#3f4c9611 .cell execution_count=9}\n``` {.python .cell-code}\nimputer = KNNImputer(n_neighbors = 5)\n\nbtc[['Vol.']] = imputer.fit_transform(btc[['Vol.']])\n```\n:::\n\n\n# Visualización de precio y volumen tradeado\n\n::: {#03e8d6a9 .cell execution_count=10}\n``` {.python .cell-code}\nfig = go.Figure(\n    data = [\n        go.Candlestick(\n            x = btc['Date'],\n            open = btc['Open'],\n            high = btc['High'],\n            low = btc['Low'],\n            close = btc['Price'],\n            name = 'Precio Bitcoin'\n        )\n    ]\n)\n\nfig.update_layout(\n    title='Gráfico de Velas de Bitcoin',\n    xaxis_title='Fecha',\n    yaxis_title='Precio (USD)',\n    hovermode='x',\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 40},\n    xaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},\n    yaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis_rangeslider_visible=False,\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/candlestick_price.html'\n    width = '730'\n    height = '400'\n    title = 'Candlestick de la serie de tiempo del precio'\n>\n</iframe>\n```\n\n::: {#ffafcf0e .cell execution_count=12}\n``` {.python .cell-code}\nfig = go.Figure()\n\nfig.add_trace(\n    go.Histogram(\n        x = btc['Date'],\n        y = btc['Vol.'],\n        name = 'Volumen',\n        histfunc = 'sum'\n    )\n)\n\nfig.update_layout(\n    title='Histograma de Volumen Tradeado Diario',\n    xaxis_title='Fecha',\n    yaxis_title='Volumen tradeado',\n    bargap=0.1,\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 40},\n    xaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},\n    yaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/histogram_vol.html'\n    width = '730'\n    height = '400'\n    title = 'Histograma del volumen de tradeado'\n>\n</iframe>\n```\n\n\n# Visualización semanal, mensual y anual del precio del bitcoin\n\n::: {#336b85f1 .cell execution_count=14}\n``` {.python .cell-code}\nbtc_c = btc.copy()\nbtc_c.set_index('Date', inplace = True)\n\nweekly_btc = btc_c.resample('W').mean()\nmonthly_btc = btc_c.resample('M').mean()\nyearly_btc = btc_c.resample('Y').mean()\n```\n:::\n\n\n::: {#0e66209b .cell execution_count=15}\n``` {.python .cell-code}\nfig_ts = make_subplots(\n    rows=3, cols=1, \n    shared_xaxes=True, \n    subplot_titles=(\n        'Precio Promedio Semanal',\n        'Precio Promedio Mensual',\n        'Precio Promedio Anual'\n    )\n)\n\nfig_ts.add_trace(\n    go.Scatter(\n        x=weekly_btc.index, \n        y=weekly_btc['Price'], \n        mode='lines+markers', \n        name='Precio Semanal'\n    ), \n    row=1, col=1\n)\n\nfig_ts.add_trace(\n    go.Scatter(\n        x=monthly_btc.index, \n        y=monthly_btc['Price'], \n        mode='lines+markers', \n        name='Precio Mensual'\n    ), \n    row=2, col=1\n)\n\nfig_ts.add_trace(\n    go.Scatter(\n        x=yearly_btc.index, \n        y=yearly_btc['Price'], \n        mode='lines+markers', \n        name='Precio Anual'\n    ), \n    row=3, col=1\n)\n\nfig_ts.update_layout(\n    title='Series de Tiempo Agrupadas (Semana, Mes, Año)',\n    xaxis_title='Fecha',\n    yaxis_title='Precio (USD)',\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    hovermode = 'x unified',\n    showlegend = False\n)\n\nfig_ts.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/ts_variety.html'\n    width = '700'\n    height = '800'\n    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'\n>\n</iframe>\n```\n\n::: {#bbdb8388 .cell execution_count=17}\n``` {.python .cell-code}\nbtc_c['Week'] = btc_c.index.to_series().dt.isocalendar().week\nbtc_c['Month'] = btc_c.index.to_series().dt.month\nbtc_c['Year'] = btc_c.index.to_series().dt.year\n```\n:::\n\n\n::: {#69255b2e .cell execution_count=18}\n``` {.python .cell-code}\ndef get_box(df: pd.DataFrame, X: str, Y: str, TITLE: str):\n    fig = px.box(\n        df,\n        x = X,\n        y = Y,\n        title = TITLE\n    )\n\n    fig.update_layout(\n        margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n        plot_bgcolor='rgba(0, 0, 0, 0.0)',\n        paper_bgcolor='rgba(0, 0, 0, 0.0)',\n        font_color=\"white\",\n        hoverlabel=dict(\n            bgcolor=\"#222\"\n        ),\n        xaxis=dict(gridcolor='#222', tickfont=dict(color='white'), title = 'Semana'),\n        yaxis=dict(gridcolor='#222', tickfont=dict(color='white'), title = 'Precio')\n    )\n\n    return fig\n\nfig_box_w = get_box(btc_c, 'Week', 'Price', 'Distribución semanal')\nfig_box_m = get_box(btc_c, 'Month', 'Price', 'Distribución mensual')\nfig_box_y = get_box(btc_c, 'Year', 'Price', 'Distribución anual')\n\nfig_box_w.show()\nfig_box_m.show()\nfig_box_y.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/box_variety_w.html'\n    width = '730'\n    height = '400'\n    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'\n>\n</iframe>\n```\n\n``` {=html}\n<iframe\n    src = 'graphs/box_variety_m.html'\n    width = '730'\n    height = '400'\n    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'\n>\n</iframe>\n```\n\n``` {=html}\n<iframe\n    src = 'graphs/box_variety_y.html'\n    width = '730'\n    height = '400'\n    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'\n>\n</iframe>\n```\n\n\n# Validación de estacionariedad de la serie de tiempo\n\n::: {#6bd3ab71 .cell execution_count=20}\n``` {.python .cell-code}\nlag_acf = acf(btc_c['Price'], nlags=2000)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=list(range(len(lag_acf))),\n    y=lag_acf,\n    marker_color='blue'\n))\n\nfig.update_layout(\n    title='Autocorrelación',\n    xaxis_title='Lags',\n    yaxis_title='Autocorrelación',\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis=dict(gridcolor='#222', tickfont=dict(color='white'))\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/acf_1.html'\n    width = '730'\n    height = '400'\n    title = 'ACF de las diferencias estacionales'\n>\n</iframe>\n```\n\n\n## Prueba de estacionariedad de Ljung-Box\n\n::: {#797e009e .cell execution_count=22}\n``` {.python .cell-code}\nresult = acorr_ljungbox(btc_c['Price'], lags=[200, 500, 1000, 2000], return_df=True)\n\nif (result['lb_pvalue'] < 0.05).any():\n    print(\"La serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).\")\nelse:\n    print(\"La serie es estacionaria (no se rechaza la hipótesis nula para los lags evaluados).\")\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lb_stat</th>\n      <th>lb_pvalue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>200</th>\n      <td>6.937886e+05</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>500</th>\n      <td>1.166338e+06</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1000</th>\n      <td>1.598385e+06</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2000</th>\n      <td>1.680488e+06</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Prueba de estacionariedad de Dickey Fuller\n\n::: {#b9241e1f .cell execution_count=23}\n``` {.python .cell-code}\nresult = adfuller(btc_c['Price'])\n\nprint(f'Estadístico de prueba: {result[0]}')\nprint(f'Valor p: {result[1]}\\n')\n\nif result[1] < 0.05:\n    print(\"La serie es estacionaria (rechazamos la hipótesis nula).\")\nelse:\n    print(\"La serie no es estacionaria (no se rechaza la hipótesis nula).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEstadístico de prueba: -2.685797950257253\nValor p: 0.07652825121387376\n\nLa serie no es estacionaria (no se rechaza la hipótesis nula).\n```\n:::\n:::\n\n\n## Transformaciones para obtener una serie estacionaria\n\n::: {#9c6de7f8 .cell execution_count=24}\n``` {.python .cell-code}\nbtc_d = btc_c.copy()\nbtc_d['Price'] = btc_c['Price'].diff()\n\nbtc_d\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n      <th>Week</th>\n      <th>Month</th>\n      <th>Year</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2024-03-24</th>\n      <td>NaN</td>\n      <td>64036.5</td>\n      <td>67587.8</td>\n      <td>63812.9</td>\n      <td>65590.0</td>\n      <td>4.96</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>2024-03-23</th>\n      <td>-3174.1</td>\n      <td>63785.6</td>\n      <td>65972.4</td>\n      <td>63074.9</td>\n      <td>35110.0</td>\n      <td>0.40</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>2024-03-22</th>\n      <td>-252.3</td>\n      <td>65501.5</td>\n      <td>66633.3</td>\n      <td>62328.3</td>\n      <td>72430.0</td>\n      <td>-2.62</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>2024-03-21</th>\n      <td>1718.3</td>\n      <td>67860.0</td>\n      <td>68161.7</td>\n      <td>64616.1</td>\n      <td>75260.0</td>\n      <td>-3.46</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>2024-03-20</th>\n      <td>2350.2</td>\n      <td>62046.8</td>\n      <td>68029.5</td>\n      <td>60850.9</td>\n      <td>133530.0</td>\n      <td>9.35</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2010-07-22</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>2160.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n    </tr>\n    <tr>\n      <th>2010-07-21</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>580.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n    </tr>\n    <tr>\n      <th>2010-07-20</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>260.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n    </tr>\n    <tr>\n      <th>2010-07-19</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>570.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n    </tr>\n    <tr>\n      <th>2010-07-18</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>80.0</td>\n      <td>0.00</td>\n      <td>28</td>\n      <td>7</td>\n      <td>2010</td>\n    </tr>\n  </tbody>\n</table>\n<p>4999 rows × 9 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#90170457 .cell execution_count=25}\n``` {.python .cell-code}\nresult_diff = adfuller(btc_d['Price'].dropna())\nprint(f'Estadístico de prueba: {result_diff[0]}')\nprint(f'Valor p: {result_diff[1]}\\n')\n\nif result_diff[1] < 0.05:\n    print(\"La serie diferenciada es estacionaria (rechazamos la hipótesis nula).\")\nelse:\n    print(\"La serie diferenciada no es estacionaria (no se rechaza la hipótesis nula).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEstadístico de prueba: -10.472194066908118\nValor p: 1.2757808100464155e-18\n\nLa serie diferenciada es estacionaria (rechazamos la hipótesis nula).\n```\n:::\n:::\n\n\n# Comportamiento por agrupaciones de la serie de tiempo\n\n::: {#5962b68b .cell execution_count=26}\n``` {.python .cell-code}\nweekly = btc_d['Price'].resample('W').agg(['mean', 'std'])\ndaily = btc_d['Price'].resample('D').agg(['mean', 'std'])\nmonthly = btc_d['Price'].resample('M').agg(['mean', 'std'])\n```\n:::\n\n\n::: {#d4dc727a .cell execution_count=27}\n``` {.python .cell-code}\nbtc_d['mu_7'] = btc_d['Price'].rolling(window = 7).mean()\nbtc_d['std_7'] = btc_d['Price'].rolling(window = 7).std()\n\nbtc_d['mu_30'] = btc_d['Price'].rolling(window = 30).mean()\nbtc_d['std_30'] = btc_d['Price'].rolling(window = 30).std()\n\nbtc_d['mu_90'] = btc_d['Price'].rolling(window = 90).mean()\nbtc_d['std_90'] = btc_d['Price'].rolling(window = 90).std()\n\nbtc_d\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n      <th>Week</th>\n      <th>Month</th>\n      <th>Year</th>\n      <th>mu_7</th>\n      <th>std_7</th>\n      <th>mu_30</th>\n      <th>std_30</th>\n      <th>mu_90</th>\n      <th>std_90</th>\n    </tr>\n    <tr>\n      <th>Date</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2024-03-24</th>\n      <td>NaN</td>\n      <td>64036.5</td>\n      <td>67587.8</td>\n      <td>63812.9</td>\n      <td>65590.0</td>\n      <td>4.96</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2024-03-23</th>\n      <td>-3174.1</td>\n      <td>63785.6</td>\n      <td>65972.4</td>\n      <td>63074.9</td>\n      <td>35110.0</td>\n      <td>0.40</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2024-03-22</th>\n      <td>-252.3</td>\n      <td>65501.5</td>\n      <td>66633.3</td>\n      <td>62328.3</td>\n      <td>72430.0</td>\n      <td>-2.62</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2024-03-21</th>\n      <td>1718.3</td>\n      <td>67860.0</td>\n      <td>68161.7</td>\n      <td>64616.1</td>\n      <td>75260.0</td>\n      <td>-3.46</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2024-03-20</th>\n      <td>2350.2</td>\n      <td>62046.8</td>\n      <td>68029.5</td>\n      <td>60850.9</td>\n      <td>133530.0</td>\n      <td>9.35</td>\n      <td>12</td>\n      <td>3</td>\n      <td>2024</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2010-07-22</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>2160.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2010-07-21</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>580.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2010-07-20</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>260.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2010-07-19</th>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>570.0</td>\n      <td>0.00</td>\n      <td>29</td>\n      <td>7</td>\n      <td>2010</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>2010-07-18</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>80.0</td>\n      <td>0.00</td>\n      <td>28</td>\n      <td>7</td>\n      <td>2010</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4999 rows × 15 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#5d693aaf .cell execution_count=28}\n``` {.python .cell-code}\ndef get_hist(df: pd.DataFrame, diff_: int, title: str):\n    fig = px.histogram(\n        df['Price'].diff(diff_).dropna(),\n        nbins = 30,\n        title = title\n    )\n\n    fig.update_layout(\n        margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n        plot_bgcolor='rgba(0, 0, 0, 0.0)',\n        paper_bgcolor='rgba(0, 0, 0, 0.0)',\n        font_color=\"white\",\n        hoverlabel=dict(\n            bgcolor=\"#222\"\n        ),\n        xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n        yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n        showlegend = False\n    )\n\n    return fig\n\nfig_7 = get_hist(btc_d, 7, 'Distribución con lag = 7')\nfig_30 = get_hist(btc_d, 30, 'Distribución con lag = 30')\nfig_90 = get_hist(btc_d, 90, 'Distribución con lag = 90')\n\nfig_7.show()\nfig_30.show()\nfig_90.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/hist_7.html'\n    width = '730'\n    height = '400'\n    title = 'Distribución con lag = 7'\n>\n</iframe>\n```\n\n``` {=html}\n<iframe\n    src = 'graphs/hist_30.html'\n    width = '730'\n    height = '400'\n    title = 'Distribución con lag = 30'\n>\n</iframe>\n```\n\n``` {=html}\n<iframe\n    src = 'graphs/hist_90.html'\n    width = '730'\n    height = '400'\n    title = 'Distribución con lag = 90'\n>\n</iframe>\n```\n\n\n# Medias móviles y tendencia\n\n::: {#1766e19d .cell execution_count=30}\n``` {.python .cell-code}\nbtc_d = btc_d.fillna(0)\n\nMA2 = btc_d['Price'].rolling(window = 2).mean()\nTwoXMA2 = MA2.rolling(window=2).mean()\n\nMA4 = btc_d['Price'].rolling(window = 4).mean()\nTwoXMA4 = MA4.rolling(window=2).mean()\n\nMA3 = btc_d['Price'].rolling(window = 3).mean()\nThreeXMA3 = MA3.rolling(window=3).mean()\n\nfig = make_subplots(\n    rows=3, cols=1, \n    shared_xaxes=True, \n    subplot_titles=(\"2 day MA & 2X2 day MA\", \"4 day MA & 2X4 day MA\", \"3 day MA & 3X3 day MA\")\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=btc_d['Price'].iloc[:45], \n        mode='lines', \n        name='Close Price', \n        line=dict(color='#9B7EBD')\n    ), \n    row=1, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=MA2.iloc[:45], \n        mode='lines', \n        name='2 day MA', \n        line=dict(color='#7AB2D3', dash='dash')\n    ), \n    row=1, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=TwoXMA2.iloc[:45], \n        mode='lines', \n        name='2X2 day MA', \n        line=dict(color='#CBD2A4', dash='dash')\n    ), \n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=btc_d['Price'].iloc[:45], \n        mode='lines', \n        name='Close Price', \n        showlegend=False, \n        line=dict(color='#9B7EBD')\n    ), \n    row=2, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=MA4.iloc[:45], \n        mode='lines', \n        name='4 day MA', \n        line=dict(color='#7AB2D3', dash='dash')\n    ), \n    row=2, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=TwoXMA4.iloc[:45], \n        mode='lines', \n        name='2X4 day MA', \n        line=dict(color='#CBD2A4', dash='dash')\n    ), \n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=btc_d['Price'].iloc[:45], \n        mode='lines', \n        name='Close Price', \n        showlegend=False, \n        line=dict(color='#9B7EBD')\n    ), \n    row=3, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=MA3.iloc[:45], \n        mode='lines', \n        name='3 day MA', \n        line=dict(color='#7AB2D3', dash='dash')\n    ), \n    row=3, col=1\n)\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index[:45], \n        y=ThreeXMA3.iloc[:45], \n        mode='lines', \n        name='3X3 day MA', \n        line=dict(color='#CBD2A4', dash='dash')\n    ), \n    row=3, col=1\n)\n\nfig.update_layout(\n    title='',\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    yaxis=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    xaxis2=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    yaxis2=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    xaxis3=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    yaxis3=dict(\n        gridcolor='#222', \n        tickfont=dict(color='white')\n    ),\n    hovermode='x unified',\n    showlegend=False\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/media_movil.html'\n    width = '730'\n    height = '800'\n    title = 'Distribución con lag = 7'\n>\n</iframe>\n```\n\n::: {#4de50c4e .cell execution_count=32}\n``` {.python .cell-code}\ndecomposition = seasonal_decompose(\n    btc_d['Price'], \n    model='additive', \n    period=180\n)\n\nfig = make_subplots(\n    rows=4, cols=1, \n    shared_xaxes=True, \n    subplot_titles=(\"Observado\", \"Tendencia\", \"Estacionalidad\", \"Residual\")\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index, \n        y=btc_d['Price'], \n        mode='lines', \n        name='Observado', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index, \n        y=decomposition.trend, \n        mode='lines', \n        name='Tendencia', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index, \n        y=decomposition.seasonal, \n        mode='lines', \n        name='Estacionalidad', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_d.index, \n        y=decomposition.resid, \n        mode='lines', \n        name='Residual', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=4, col=1\n)\n\nfig.update_layout(\n    title_text=\"Descomposición Estacional de la Serie de Tiempo\", \n    showlegend=False,\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),\n    hovermode = 'x unified',\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/descomposition.html'\n    width = '730'\n    height = '800'\n    title = 'Distribución con lag = 7'\n>\n</iframe>\n```\n\n::: {#0fd3161d .cell execution_count=34}\n``` {.python .cell-code}\nbtc_ma = btc_d.copy()\n\nbtc_ma['Price_adj'] = btc_ma['Price'] - TwoXMA4\nbtc_ma = btc_ma.fillna(0)\n```\n:::\n\n\n::: {#9acfab8d .cell execution_count=35}\n``` {.python .cell-code}\ndecomposition = seasonal_decompose(\n    btc_ma['Price_adj'], \n    model='additive', \n    period=180\n)\n\nfig = make_subplots(\n    rows=4, cols=1, \n    shared_xaxes=True, \n    subplot_titles=(\"Observado\", \"Tendencia\", \"Estacionalidad\", \"Residual\")\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_ma.index, \n        y=btc_ma['Price_adj'], \n        mode='lines', \n        name='Observado', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=1, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_ma.index, \n        y=decomposition.trend, \n        mode='lines', \n        name='Tendencia', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=2, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_ma.index, \n        y=decomposition.seasonal, \n        mode='lines', \n        name='Estacionalidad', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=3, col=1\n)\n\nfig.add_trace(\n    go.Scatter(\n        x=btc_ma.index, \n        y=decomposition.resid, \n        mode='lines', \n        name='Residual', \n        line=dict(color='#9B7EBD', width=2)\n    ),\n    row=4, col=1\n)\n\nfig.update_layout(\n    title_text=\"Descomposición Estacional de la Serie de Tiempo\", \n    showlegend=False,\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),\n    xaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),\n    hovermode = 'x unified',\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/descomposition_2.html'\n    width = '730'\n    height = '800'\n    title = 'Distribución con lag = 7'\n>\n</iframe>\n```\n\n\n## Prueba de estacionariedad de Ljung-Box\n\n::: {#214ed52c .cell execution_count=37}\n``` {.python .cell-code}\nresult = acorr_ljungbox(btc_ma['Price_adj'], lags=[24, 100, 200], return_df=True)\n\nif (result['lb_pvalue'] < 0.05).any():\n    print(\"La serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).\")\nelse:\n    print(\"La serie es estacionaria (no se rechaza la hipótesis nula para los lags evaluados).\")\n\nresult\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLa serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>lb_stat</th>\n      <th>lb_pvalue</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>24</th>\n      <td>417.732848</td>\n      <td>1.703098e-73</td>\n    </tr>\n    <tr>\n      <th>100</th>\n      <td>855.651535</td>\n      <td>2.501987e-120</td>\n    </tr>\n    <tr>\n      <th>200</th>\n      <td>1256.319601</td>\n      <td>2.027382e-152</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Prueba de estacionariedad de Dickey Fuller\n\n::: {#d91b6783 .cell execution_count=38}\n``` {.python .cell-code}\nresult = adfuller(btc_ma['Price_adj'])\n\nprint(f'Estadístico de prueba: {result[0]}')\nprint(f'Valor p: {result[1]}\\n')\n\nif result[1] < 0.05:\n    print(\"La serie es estacionaria (rechazamos la hipótesis nula).\")\nelse:\n    print(\"La serie no es estacionaria (no se rechaza la hipótesis nula).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEstadístico de prueba: -21.518148825437567\nValor p: 0.0\n\nLa serie es estacionaria (rechazamos la hipótesis nula).\n```\n:::\n:::\n\n\n::: {#faba8007 .cell execution_count=39}\n``` {.python .cell-code}\nlag_acf = acf(btc_ma['Price_adj'], nlags=100)\n\nfig = go.Figure()\n\nfig.add_trace(go.Bar(\n    x=list(range(len(lag_acf))),\n    y=lag_acf,\n    marker_color='blue'\n))\n\nfig.update_layout(\n    title='Autocorrelación',\n    xaxis_title='Lags',\n    yaxis_title='Autocorrelación',\n    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},\n    plot_bgcolor='rgba(0, 0, 0, 0.0)',\n    paper_bgcolor='rgba(0, 0, 0, 0.0)',\n    font_color=\"white\",\n    hoverlabel=dict(\n        bgcolor=\"#222\"\n    ),\n    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),\n    yaxis=dict(gridcolor='#222', tickfont=dict(color='white'))\n)\n\nfig.show()\n```\n:::\n\n\n\n\n``` {=html}\n<iframe\n    src = 'graphs/acf_2.html'\n    width = '730'\n    height = '400'\n    title = 'ACF de las diferencias estacionales'\n>\n</iframe>\n```\n\n\n# Retorno acumulado diario y volatilidad \n\n::: {#f15cbd41 .cell execution_count=41}\n``` {.python .cell-code}\nbtc['R_j'] = btc['Price'].pct_change()\nbtc['A_t'] = btc['R_j'].cumsum()\n\ndef calc_volt(btc: pd.DataFrame, window: int):\n    return btc['R_j'].rolling(window = window).std()\n\nws = [7, 14, 21, 28]\nfor w in ws:\n    btc[f'σ_{w}'] = calc_volt(btc, w)\n\nbtc\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Date</th>\n      <th>Price</th>\n      <th>Open</th>\n      <th>High</th>\n      <th>Low</th>\n      <th>Vol.</th>\n      <th>Change %</th>\n      <th>R_j</th>\n      <th>A_t</th>\n      <th>σ_7</th>\n      <th>σ_14</th>\n      <th>σ_21</th>\n      <th>σ_28</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2024-03-24</td>\n      <td>67211.9</td>\n      <td>64036.5</td>\n      <td>67587.8</td>\n      <td>63812.9</td>\n      <td>65590.0</td>\n      <td>4.96</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2024-03-23</td>\n      <td>64037.8</td>\n      <td>63785.6</td>\n      <td>65972.4</td>\n      <td>63074.9</td>\n      <td>35110.0</td>\n      <td>0.40</td>\n      <td>-0.047225</td>\n      <td>-0.047225</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2024-03-22</td>\n      <td>63785.5</td>\n      <td>65501.5</td>\n      <td>66633.3</td>\n      <td>62328.3</td>\n      <td>72430.0</td>\n      <td>-2.62</td>\n      <td>-0.003940</td>\n      <td>-0.051165</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2024-03-21</td>\n      <td>65503.8</td>\n      <td>67860.0</td>\n      <td>68161.7</td>\n      <td>64616.1</td>\n      <td>75260.0</td>\n      <td>-3.46</td>\n      <td>0.026939</td>\n      <td>-0.024226</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2024-03-20</td>\n      <td>67854.0</td>\n      <td>62046.8</td>\n      <td>68029.5</td>\n      <td>60850.9</td>\n      <td>133530.0</td>\n      <td>9.35</td>\n      <td>0.035879</td>\n      <td>0.011652</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4994</th>\n      <td>2010-07-22</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>2160.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>-4.322978</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4995</th>\n      <td>2010-07-21</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>580.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>-4.322978</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4996</th>\n      <td>2010-07-20</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>260.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>-4.322978</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4997</th>\n      <td>2010-07-19</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>570.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>-4.322978</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>4998</th>\n      <td>2010-07-18</td>\n      <td>0.1</td>\n      <td>0.0</td>\n      <td>0.1</td>\n      <td>0.1</td>\n      <td>80.0</td>\n      <td>0.00</td>\n      <td>0.000000</td>\n      <td>-4.322978</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4999 rows × 13 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#7a10f45c .cell execution_count=42}\n``` {.python .cell-code}\nbtc.to_csv('data/btc_models.csv', index = False)\n```\n:::\n\n\n",
    "supporting": [
      "eda_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.35.2.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}