---
title: "Análisis exploratorio de los datos"
---

# Importar librerías

```{python}
import pandas as pd
import numpy as np

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

from sklearn.impute import KNNImputer

from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.tsa.stattools import acf, adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox

import warnings
warnings.filterwarnings("ignore")
```

# Importar datos

``` {python}
btc = pd.read_csv('https://raw.githubusercontent.com/lihkir/Data/refs/heads/main/Bitcoin%20Historical%20Data.csv')

btc.head()
```

``` {python}
btc.shape
```

``` {python}
btc.info()
```

``` {python}
btc[['Price', 'Open', 'High', 'Low']] = btc[['Price', 'Open', 'High', 'Low']].replace(',', '', regex=True).astype(float)
btc['Change %'] = btc['Change %'].str.replace('%', '').astype(float)

btc['Date'] = pd.to_datetime(btc['Date'], format='%m/%d/%Y')

def convert_volume(vol):
    if isinstance(vol, str):
        if 'K' in vol:
            return float(vol.replace('K', '').replace(',', '')) * 1_000
        elif 'M' in vol:
            return float(vol.replace('M', '').replace(',', '')) * 1_000_000
        elif 'B' in vol:
            return float(vol.replace('B', '').replace(',', '')) * 1_000_000_000
        else:
            return float(vol.replace(',', ''))
    else:
        return vol

btc['Vol.'] = btc['Vol.'].apply(convert_volume)

btc.head()
```

``` {python}
btc.info()
```

``` {python}
btc.describe()
```

# Datos faltantes

``` {python}
missing_values = btc.isnull().sum()
missing_percentage = round((missing_values / len(btc)) * 100, 4)
missing_percentage
```

``` {python}
imputer = KNNImputer(n_neighbors = 5)

btc[['Vol.']] = imputer.fit_transform(btc[['Vol.']])
```

# Visualización de precio y volumen tradeado

``` {python}
#| output: false
fig = go.Figure(
    data = [
        go.Candlestick(
            x = btc['Date'],
            open = btc['Open'],
            high = btc['High'],
            low = btc['Low'],
            close = btc['Price'],
            name = 'Precio Bitcoin'
        )
    ]
)

fig.update_layout(
    title='Gráfico de Velas de Bitcoin',
    xaxis_title='Fecha',
    yaxis_title='Precio (USD)',
    hovermode='x',
    margin={'b': 0, 'r': 30, 'l': 30, 't': 40},
    xaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},
    yaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis_rangeslider_visible=False,
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/candlestick_price.html')
```

``` {=html}
<iframe
    src = 'graphs/candlestick_price.html'
    width = '730'
    height = '400'
    title = 'Candlestick de la serie de tiempo del precio'
>
</iframe>
```

``` {python}
#| output: false
fig = go.Figure()

fig.add_trace(
    go.Histogram(
        x = btc['Date'],
        y = btc['Vol.'],
        name = 'Volumen',
        histfunc = 'sum'
    )
)

fig.update_layout(
    title='Histograma de Volumen Tradeado Diario',
    xaxis_title='Fecha',
    yaxis_title='Volumen tradeado',
    bargap=0.1,
    margin={'b': 0, 'r': 30, 'l': 30, 't': 40},
    xaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},
    yaxis={'gridcolor': '#222', 'tickfont': {'color': 'white'}},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/histogram_vol.html')
```

``` {=html}
<iframe
    src = 'graphs/histogram_vol.html'
    width = '730'
    height = '400'
    title = 'Histograma del volumen de tradeado'
>
</iframe>
```

# Visualización semanal, mensual y anual del precio del bitcoin

``` {python}
btc_c = btc.copy()
btc_c.set_index('Date', inplace = True)

weekly_btc = btc_c.resample('W').mean()
monthly_btc = btc_c.resample('M').mean()
yearly_btc = btc_c.resample('Y').mean()
```

``` {python}
#| output: false
fig_ts = make_subplots(
    rows=3, cols=1, 
    shared_xaxes=True, 
    subplot_titles=(
        'Precio Promedio Semanal',
        'Precio Promedio Mensual',
        'Precio Promedio Anual'
    )
)

fig_ts.add_trace(
    go.Scatter(
        x=weekly_btc.index, 
        y=weekly_btc['Price'], 
        mode='lines+markers', 
        name='Precio Semanal'
    ), 
    row=1, col=1
)

fig_ts.add_trace(
    go.Scatter(
        x=monthly_btc.index, 
        y=monthly_btc['Price'], 
        mode='lines+markers', 
        name='Precio Mensual'
    ), 
    row=2, col=1
)

fig_ts.add_trace(
    go.Scatter(
        x=yearly_btc.index, 
        y=yearly_btc['Price'], 
        mode='lines+markers', 
        name='Precio Anual'
    ), 
    row=3, col=1
)

fig_ts.update_layout(
    title='Series de Tiempo Agrupadas (Semana, Mes, Año)',
    xaxis_title='Fecha',
    yaxis_title='Precio (USD)',
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    hovermode = 'x unified',
    showlegend = False
)

fig_ts.show()
```

``` {python}
#| echo: false
fig_ts.write_html('graphs/ts_variety.html')
```

``` {=html}
<iframe
    src = 'graphs/ts_variety.html'
    width = '700'
    height = '800'
    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'
>
</iframe>
```

``` {python}
btc_c['Week'] = btc_c.index.to_series().dt.isocalendar().week
btc_c['Month'] = btc_c.index.to_series().dt.month
btc_c['Year'] = btc_c.index.to_series().dt.year
```

``` {python}
#| output: false
def get_box(df: pd.DataFrame, X: str, Y: str, TITLE: str):
    fig = px.box(
        df,
        x = X,
        y = Y,
        title = TITLE
    )

    fig.update_layout(
        margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
        plot_bgcolor='rgba(0, 0, 0, 0.0)',
        paper_bgcolor='rgba(0, 0, 0, 0.0)',
        font_color="white",
        hoverlabel=dict(
            bgcolor="#222"
        ),
        xaxis=dict(gridcolor='#222', tickfont=dict(color='white'), title = 'Semana'),
        yaxis=dict(gridcolor='#222', tickfont=dict(color='white'), title = 'Precio')
    )

    return fig

fig_box_w = get_box(btc_c, 'Week', 'Price', 'Distribución semanal')
fig_box_m = get_box(btc_c, 'Month', 'Price', 'Distribución mensual')
fig_box_y = get_box(btc_c, 'Year', 'Price', 'Distribución anual')

fig_box_w.show()
fig_box_m.show()
fig_box_y.show()
```

``` {python}
#| echo: false
fig_box_w.write_html('graphs/box_variety_w.html')
fig_box_m.write_html('graphs/box_variety_m.html')
fig_box_y.write_html('graphs/box_variety_y.html')
```

``` {=html}
<iframe
    src = 'graphs/box_variety_w.html'
    width = '730'
    height = '400'
    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'
>
</iframe>
```

``` {=html}
<iframe
    src = 'graphs/box_variety_m.html'
    width = '730'
    height = '400'
    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'
>
</iframe>
```

``` {=html}
<iframe
    src = 'graphs/box_variety_y.html'
    width = '730'
    height = '400'
    title = 'Series de Tiempo Agrupadas (Semana, Mes, Año)'
>
</iframe>
```

# Validación de estacionariedad de la serie de tiempo

``` {python}
#| output: false
lag_acf = acf(btc_c['Price'], nlags=2000)

fig = go.Figure()

fig.add_trace(go.Bar(
    x=list(range(len(lag_acf))),
    y=lag_acf,
    marker_color='blue'
))

fig.update_layout(
    title='Autocorrelación',
    xaxis_title='Lags',
    yaxis_title='Autocorrelación',
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis=dict(gridcolor='#222', tickfont=dict(color='white'))
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/acf_1.html')
```

``` {=html}
<iframe
    src = 'graphs/acf_1.html'
    width = '730'
    height = '400'
    title = 'ACF de las diferencias estacionales'
>
</iframe>
```

## Prueba de estacionariedad de Ljung-Box

``` {python}
result = acorr_ljungbox(btc_c['Price'], lags=[200, 500, 1000, 2000], return_df=True)

if (result['lb_pvalue'] < 0.05).any():
    print("La serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).")
else:
    print("La serie es estacionaria (no se rechaza la hipótesis nula para los lags evaluados).")

result
```

## Prueba de estacionariedad de Dickey Fuller

``` {python}
result = adfuller(btc_c['Price'])

print(f'Estadístico de prueba: {result[0]}')
print(f'Valor p: {result[1]}\n')

if result[1] < 0.05:
    print("La serie es estacionaria (rechazamos la hipótesis nula).")
else:
    print("La serie no es estacionaria (no se rechaza la hipótesis nula).")
```

## Transformaciones para obtener una serie estacionaria

``` {python}
btc_d = btc_c.copy()
btc_d['Price'] = btc_c['Price'].diff()

btc_d
```

``` {python}
result_diff = adfuller(btc_d['Price'].dropna())
print(f'Estadístico de prueba: {result_diff[0]}')
print(f'Valor p: {result_diff[1]}\n')

if result_diff[1] < 0.05:
    print("La serie diferenciada es estacionaria (rechazamos la hipótesis nula).")
else:
    print("La serie diferenciada no es estacionaria (no se rechaza la hipótesis nula).")
```

# Comportamiento por agrupaciones de la serie de tiempo

``` {python}
weekly = btc_d['Price'].resample('W').agg(['mean', 'std'])
daily = btc_d['Price'].resample('D').agg(['mean', 'std'])
monthly = btc_d['Price'].resample('M').agg(['mean', 'std'])
```

``` {python}
btc_d['mu_7'] = btc_d['Price'].rolling(window = 7).mean()
btc_d['std_7'] = btc_d['Price'].rolling(window = 7).std()

btc_d['mu_30'] = btc_d['Price'].rolling(window = 30).mean()
btc_d['std_30'] = btc_d['Price'].rolling(window = 30).std()

btc_d['mu_90'] = btc_d['Price'].rolling(window = 90).mean()
btc_d['std_90'] = btc_d['Price'].rolling(window = 90).std()

btc_d
```

``` {python}
#| output: false
def get_hist(df: pd.DataFrame, diff_: int, title: str):
    fig = px.histogram(
        df['Price'].diff(diff_).dropna(),
        nbins = 30,
        title = title
    )

    fig.update_layout(
        margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
        plot_bgcolor='rgba(0, 0, 0, 0.0)',
        paper_bgcolor='rgba(0, 0, 0, 0.0)',
        font_color="white",
        hoverlabel=dict(
            bgcolor="#222"
        ),
        xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
        yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
        showlegend = False
    )

    return fig

fig_7 = get_hist(btc_d, 7, 'Distribución con lag = 7')
fig_30 = get_hist(btc_d, 30, 'Distribución con lag = 30')
fig_90 = get_hist(btc_d, 90, 'Distribución con lag = 90')

fig_7.show()
fig_30.show()
fig_90.show()
```

``` {python}
#| echo: false
fig_7.write_html('graphs/hist_7.html')
fig_30.write_html('graphs/hist_30.html')
fig_90.write_html('graphs/hist_90.html')
```

``` {=html}
<iframe
    src = 'graphs/hist_7.html'
    width = '730'
    height = '400'
    title = 'Distribución con lag = 7'
>
</iframe>
```

``` {=html}
<iframe
    src = 'graphs/hist_30.html'
    width = '730'
    height = '400'
    title = 'Distribución con lag = 30'
>
</iframe>
```

``` {=html}
<iframe
    src = 'graphs/hist_90.html'
    width = '730'
    height = '400'
    title = 'Distribución con lag = 90'
>
</iframe>
```

# Medias móviles y tendencia

``` {python}
#| output: false
btc_d = btc_d.fillna(0)

MA2 = btc_d['Price'].rolling(window = 2).mean()
TwoXMA2 = MA2.rolling(window=2).mean()

MA4 = btc_d['Price'].rolling(window = 4).mean()
TwoXMA4 = MA4.rolling(window=2).mean()

MA3 = btc_d['Price'].rolling(window = 3).mean()
ThreeXMA3 = MA3.rolling(window=3).mean()

fig = make_subplots(
    rows=3, cols=1, 
    shared_xaxes=True, 
    subplot_titles=("2 day MA & 2X2 day MA", "4 day MA & 2X4 day MA", "3 day MA & 3X3 day MA")
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=btc_d['Price'].iloc[:45], 
        mode='lines', 
        name='Close Price', 
        line=dict(color='#9B7EBD')
    ), 
    row=1, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=MA2.iloc[:45], 
        mode='lines', 
        name='2 day MA', 
        line=dict(color='#7AB2D3', dash='dash')
    ), 
    row=1, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=TwoXMA2.iloc[:45], 
        mode='lines', 
        name='2X2 day MA', 
        line=dict(color='#CBD2A4', dash='dash')
    ), 
    row=1, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=btc_d['Price'].iloc[:45], 
        mode='lines', 
        name='Close Price', 
        showlegend=False, 
        line=dict(color='#9B7EBD')
    ), 
    row=2, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=MA4.iloc[:45], 
        mode='lines', 
        name='4 day MA', 
        line=dict(color='#7AB2D3', dash='dash')
    ), 
    row=2, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=TwoXMA4.iloc[:45], 
        mode='lines', 
        name='2X4 day MA', 
        line=dict(color='#CBD2A4', dash='dash')
    ), 
    row=2, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=btc_d['Price'].iloc[:45], 
        mode='lines', 
        name='Close Price', 
        showlegend=False, 
        line=dict(color='#9B7EBD')
    ), 
    row=3, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=MA3.iloc[:45], 
        mode='lines', 
        name='3 day MA', 
        line=dict(color='#7AB2D3', dash='dash')
    ), 
    row=3, col=1
)
fig.add_trace(
    go.Scatter(
        x=btc_d.index[:45], 
        y=ThreeXMA3.iloc[:45], 
        mode='lines', 
        name='3X3 day MA', 
        line=dict(color='#CBD2A4', dash='dash')
    ), 
    row=3, col=1
)

fig.update_layout(
    title='',
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    yaxis=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    xaxis2=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    yaxis2=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    xaxis3=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    yaxis3=dict(
        gridcolor='#222', 
        tickfont=dict(color='white')
    ),
    hovermode='x unified',
    showlegend=False
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/media_movil.html')
```

``` {=html}
<iframe
    src = 'graphs/media_movil.html'
    width = '730'
    height = '800'
    title = 'Distribución con lag = 7'
>
</iframe>
```

``` {python}
#| output: false
decomposition = seasonal_decompose(
    btc_d['Price'], 
    model='additive', 
    period=180
)

fig = make_subplots(
    rows=4, cols=1, 
    shared_xaxes=True, 
    subplot_titles=("Observado", "Tendencia", "Estacionalidad", "Residual")
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index, 
        y=btc_d['Price'], 
        mode='lines', 
        name='Observado', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=1, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index, 
        y=decomposition.trend, 
        mode='lines', 
        name='Tendencia', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=2, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index, 
        y=decomposition.seasonal, 
        mode='lines', 
        name='Estacionalidad', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=3, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_d.index, 
        y=decomposition.resid, 
        mode='lines', 
        name='Residual', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=4, col=1
)

fig.update_layout(
    title_text="Descomposición Estacional de la Serie de Tiempo", 
    showlegend=False,
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),
    hovermode = 'x unified',
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/descomposition.html')
```

``` {=html}
<iframe
    src = 'graphs/descomposition.html'
    width = '730'
    height = '800'
    title = 'Distribución con lag = 7'
>
</iframe>
```

``` {python}
btc_ma = btc_d.copy()

btc_ma['Price_adj'] = btc_ma['Price'] - TwoXMA4
btc_ma = btc_ma.fillna(0)
```

``` {python}
#| output: false
decomposition = seasonal_decompose(
    btc_ma['Price_adj'], 
    model='additive', 
    period=180
)

fig = make_subplots(
    rows=4, cols=1, 
    shared_xaxes=True, 
    subplot_titles=("Observado", "Tendencia", "Estacionalidad", "Residual")
)

fig.add_trace(
    go.Scatter(
        x=btc_ma.index, 
        y=btc_ma['Price_adj'], 
        mode='lines', 
        name='Observado', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=1, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_ma.index, 
        y=decomposition.trend, 
        mode='lines', 
        name='Tendencia', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=2, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_ma.index, 
        y=decomposition.seasonal, 
        mode='lines', 
        name='Estacionalidad', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=3, col=1
)

fig.add_trace(
    go.Scatter(
        x=btc_ma.index, 
        y=decomposition.resid, 
        mode='lines', 
        name='Residual', 
        line=dict(color='#9B7EBD', width=2)
    ),
    row=4, col=1
)

fig.update_layout(
    title_text="Descomposición Estacional de la Serie de Tiempo", 
    showlegend=False,
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis2=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis3=dict(gridcolor='#222', tickfont=dict(color='white')),
    xaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis4=dict(gridcolor='#222', tickfont=dict(color='white')),
    hovermode = 'x unified',
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/descomposition_2.html')
```

``` {=html}
<iframe
    src = 'graphs/descomposition_2.html'
    width = '730'
    height = '800'
    title = 'Distribución con lag = 7'
>
</iframe>
```

## Prueba de estacionariedad de Ljung-Box

``` {python}
result = acorr_ljungbox(btc_ma['Price_adj'], lags=[24, 100, 200], return_df=True)

if (result['lb_pvalue'] < 0.05).any():
    print("La serie no es estacionaria (rechazamos la hipótesis nula para algunos lags).")
else:
    print("La serie es estacionaria (no se rechaza la hipótesis nula para los lags evaluados).")

result
```

## Prueba de estacionariedad de Dickey Fuller

``` {python}
result = adfuller(btc_ma['Price_adj'])

print(f'Estadístico de prueba: {result[0]}')
print(f'Valor p: {result[1]}\n')

if result[1] < 0.05:
    print("La serie es estacionaria (rechazamos la hipótesis nula).")
else:
    print("La serie no es estacionaria (no se rechaza la hipótesis nula).")
```

``` {python}
#| output: false
lag_acf = acf(btc_ma['Price_adj'], nlags=100)

fig = go.Figure()

fig.add_trace(go.Bar(
    x=list(range(len(lag_acf))),
    y=lag_acf,
    marker_color='blue'
))

fig.update_layout(
    title='Autocorrelación',
    xaxis_title='Lags',
    yaxis_title='Autocorrelación',
    margin={'b': 0, 'r': 30, 'l': 30, 't': 80},
    plot_bgcolor='rgba(0, 0, 0, 0.0)',
    paper_bgcolor='rgba(0, 0, 0, 0.0)',
    font_color="white",
    hoverlabel=dict(
        bgcolor="#222"
    ),
    xaxis=dict(gridcolor='#222', tickfont=dict(color='white')),
    yaxis=dict(gridcolor='#222', tickfont=dict(color='white'))
)

fig.show()
```

``` {python}
#| echo: false
fig.write_html('graphs/acf_2.html')
```

``` {=html}
<iframe
    src = 'graphs/acf_2.html'
    width = '730'
    height = '400'
    title = 'ACF de las diferencias estacionales'
>
</iframe>
```

# Retorno acumulado diario y volatilidad 

``` {python}
btc['R_j'] = btc['Price'].pct_change()
btc['A_t'] = btc['R_j'].cumsum()

def calc_volt(btc: pd.DataFrame, window: int):
    return btc['R_j'].rolling(window = window).std()

ws = [7, 14, 21, 28]
for w in ws:
    btc[f'σ_{w}'] = calc_volt(btc, w)

btc
```

``` {python}
btc.to_csv('data/btc_models.csv', index = False)
```